{% extends "views/layouts/main.njk" %}

{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}

{% block pageContent %}
{% set inspectorDetails %}
<div class="pins-container-wide govuk-grid-row">
    <div class="govuk-grid-column-one-half">
        <h2 class="govuk-heading-m">{{ inspector.firstName + " " + inspector.lastName }}</h2>
        <h2 class="govuk-heading-m">Contact Details</h2>
            {{ govukSummaryList({
                rows: [
                    { key: { text: "Address" }, value: { text: inspector.address.addressLine1 + ", " + inspector.address.postcode } },
                    { key: { text: "Work Phone" }, value: { text: inspector.inspectorPhone } },
                    { key: { text: "Mobile Phone" }, value: { text: inspector.inspectorPhone  } }
                ]
            }) }}

            <h2 class="govuk-heading-m">Work Details</h2>
            {{ govukSummaryList({
                rows: [
                    { key: { text: "Resource Group" }, value: { text: "" } },
                    { key: { text: "Grade" }, value: { text: inspector.grade } },
                    { key: { text: "FTE" }, value: { text: inspector.fte } },
                    { key: { text: "Charting Officer" }, value: { text: inspector.chartingOfficerId } },
                    { key: { text: "Charting Officer Phone" }, value: { text: inspector.chartingOfficerPhone } },
                    { key: { text: "Inspector Manager" }, value: { text: inspector.inspectorManager } }
                ]
            }) }}    
    </div>
    <div class="govuk-grid-column-one-half govuk-!-margin-top-8">
        {{ govukTable({
            caption: "Specialisms",
            captionClasses: "govuk-table__caption--m",
            firstCellIsHeader: true,
            head: [
                { text: "Name", classes: "govuk-!-width-one-half" },
                { text: "Proficiency", classes: "govuk-!-width-one-quarter" },
                { text: "Valid From", classes: "govuk-!-width-one-quarter" }
            ],
            rows: [
                [ { text: "Advertisements" }, { text: "Trained" }, { text: "11/03/24" } ],
                [ { text: "Appeal Against Conditions" }, { text: "Trained" }, { text: "17/11/23" } ],
                [ { text: "General Allocation" }, { text: "Trained" }, { text: "12/12/21" } ],
                [ { text: "Appearance Design" }, { text: "Trained" }, { text: "02/06/23" } ],
                [ { text: "Green Belt" }, { text: "Trained" }, { text: "29/11/24" } ],
                [ { text: "Hearings Trained" }, { text: "Trained" }, { text: "01/01/19" } ],
                [ { text: "Special Protection Area" }, { text: "Trained" }, { text: "25/08/19" } ]
                ],
            classes: 'custom-table-header'
            }) }}
    </div>
</div>
{% endset %}

{% set outlookView %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2025 Calendar</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.js"></script>
</head>
<body>
    <div class="calendar-container">
        <div class="calendar-header">
            <button onclick="goToToday()">Today</button>
            <div class="nav-buttons">
                <button onclick="prevWeek()">&lt;</button>
                <button onclick="nextWeek()">&gt;</button>
            </div>
            <h2 id="monthYear"></h2>
            <label for="weekPicker" class="arrow-button">â†“</label>
            <input type="text" id="weekPicker" placeholder="Select date" readonly>
        </div>
        <table class="calendar-table">
            <thead>
                <tr>
                    <th class="time-column"></th>
                    <th id="mon"></th>
                    <th id="tue"></th>
                    <th id="wed"></th>
                    <th id="thu"></th>
                    <th id="fri"></th>
                </tr>
            </thead>
            <tbody id="calendar-body">
            </tbody>
        </table>
    </div>
    
    <script>
        let currentWeek = 0;
        const year = 2025;

        function getCurrentWeek() {
            const today = new Date();
            const startDate = new Date(year, 0, 1);
            while (startDate.getDay() !== 1) {
                startDate.setDate(startDate.getDate() - 1);
            }
            const diff = Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000));
            return diff;
        }

        function generateCalendar(weekOffset) {
            const startDate = new Date(year, 0, 1 + (weekOffset * 7));
            while (startDate.getDay() !== 1) {
                startDate.setDate(startDate.getDate() - 1);
            }

            const weekStartDate = startDate.toLocaleDateString("en-GB");
            const weekEndDate = new Date(startDate);
            weekEndDate.setDate(weekEndDate.getDate() + 4);
            const formattedTitle = `${("0" + startDate.getDate()).slice(-2)}-${("0" + weekEndDate.getDate()).slice(-2)} ${startDate.toLocaleString('en-US', { month: 'long' })}, ${year}`;
            document.getElementById("monthYear").innerText = formattedTitle;
            
            const headers = ["mon", "tue", "wed", "thu", "fri"];
            for (let i = 0; i < 5; i++) {
                const day = new Date(startDate);
                day.setDate(day.getDate() + i);
                document.getElementById(headers[i]).innerText = `${("0" + day.getDate()).slice(-2)} ${day.toLocaleString('en-US', { weekday: 'short' })}`;
            }
            
            const tbody = document.getElementById("calendar-body");
            tbody.innerHTML = "";
            
            for (let hour = 9; hour <= 17; hour++) {
                for (let min of [0, 30]) {
                    const row = document.createElement("tr");
                    const timeCell = document.createElement("td");
                    timeCell.classList.add("time-column");
                    // Only set time for the hour rows, not for the 30-minute blocks
                    if (min === 0) {
                        timeCell.innerText = `${hour}`;
                    } else {
                        timeCell.innerText = "";
                    }
                    row.appendChild(timeCell);
                    
                    for (let i = 0; i < 5; i++) {
                        const cell = document.createElement("td");
                        row.appendChild(cell);
                    }
                    tbody.appendChild(row);
                }
            }
        }
        
        function prevWeek() {
            if (currentWeek > 0) {
                currentWeek--;
                generateCalendar(currentWeek);
            }
        }
        
        function nextWeek() {
            if (currentWeek < 51) {
                currentWeek++;
                generateCalendar(currentWeek);
            }
        }

        function goToToday() {
            currentWeek = getCurrentWeek();
            generateCalendar(currentWeek); 
        }

        document.addEventListener("DOMContentLoaded", function() {
            // Set the calendar to the current week when the page loads
            currentWeek = getCurrentWeek();
            generateCalendar(currentWeek);

            flatpickr("#weekPicker", {
                enableTime: false,
                dateFormat: "d/m/Y",
                weekNumbers: true,
                onChange: function(selectedDates) {
                    const selectedDate = selectedDates[0];
                    const startDate = new Date(year, 0, 1);
                    while (startDate.getDay() !== 1) {
                        startDate.setDate(startDate.getDate() - 1);
                    }
                    const diff = Math.floor((selectedDate - startDate) / (7 * 24 * 60 * 60 * 1000));
                    currentWeek = diff;
                    generateCalendar(currentWeek);
                },
                position: 'auto'
            });
        });
    </script>
</body>
</html>

{% endset %}

    {{ govukTabs({
            items: [
                {
                    label: "Inspector Details",
                    id: "cases",
                    panel: { html: inspectorDetails }
                },
                {
                    label: "Calendar View",
                    id: "mapView",
                    panel: { html: outlookView }
                }
            ]
        }) }}
{% endblock %}



