{% extends "views/layouts/main.njk" %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% from "views/layouts/components/map.njk" import map %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}

{% block pageContent %}
<div class="filter-container">
    <div class="app-filter">
        <div class="app-filter__header">
            <div class="app-filter__header-title">
                <h2 class="govuk-heading-m bold-title">Select Inspector</h2>
            </div>
        </div>
        <form method="post" novalidate>
            <div class="govuk-form-group" style="display: flex; gap: 5px; margin-bottom 0">
                {% set inspectorList = [] %}
                {% for i in inspectors %}
                    {% set inspectorList = (inspectorList.push({
                        text: i.lastName + ', ' + i.firstName,
                        value: i.id,
                        selected: i.id == inspectorId
                    }), inspectorList) %}
                {% endfor %}
                {{ govukSelect({
                    id: "inspectors",
                    name: "inspector",
                    items: inspectorList
                }) }}
                {{ govukButton({
                    text: "View",
                    classes: "govuk-button--primary",
                    value: "view",
                    name: "action",
                    type: "submit"
                }) }}
            </div>
            <div class="govuk-form-group" style="margin-top: 5px;">
                {{ govukButton({
                    text: "Select",
                    classes: "govuk-button--primary",
                    value: "select",
                    name: "action",
                    type: "submit"
                }) }}
            </div>
        </form>
        <div class="app-filter__header">
            <div class="app-filter__header-title">
                <h2 class="govuk-heading-m">Case Filters</h2>
            </div>
        </div>
        <div class="app-filter__content">
            <div class="app-filter__options">
                <form method="get" novalidate>
                    <button class="govuk-button" data-module="govuk-button">
                        Apply filters
                    </button>

                    {{ govukDetails({
                        summaryText: "Case Age",
                        html: govukSelect({
                        id: "filters[ageRange]",
                        name: "filters[ageRange]",
                        classes: "govuk-select--width-10",
                        label: {
                            text: "Case age (weeks)",
                            classes: "govuk-label--s"
                        },
                        items: [
                            { text: "All", value: "all", selected: data.filters.ageRange == 'all' },
                            { text: "> 24 weeks", value: "24-99999", selected: data.filters.ageRange == '24-99999' },
                            { text: "22 – 24 weeks", value: "22-24", selected: data.filters.ageRange == '22-24' },
                            { text: "20 – 22 weeks", value: "20-22", selected: data.filters.ageRange == '20-22' },
                            { text: "18 – 20 weeks", value: "18-20", selected: data.filters.ageRange == '18-20' },
                            { text: "16 – 18 weeks", value: "16-18", selected: data.filters.ageRange == '16-18' },
                            { text: "14 – 16 weeks", value: "14-16", selected: data.filters.ageRange == '14-16' },
                            { text: "12 – 14 weeks", value: "12-14", selected: data.filters.ageRange == '12-14' },
                            { text: "10 – 12 weeks", value: "10-12", selected: data.filters.ageRange == '10-12' },
                            { text: "8 – 10 weeks", value: "8-10", selected: data.filters.ageRange == '8-10' },
                            { text: "6 – 8 weeks", value: "6-8", selected: data.filters.ageRange == '6-8' },
                            { text: "4 – 6 weeks", value: "4-6", selected: data.filters.ageRange == '4-6' },
                            { text: "2 – 4 weeks", value: "2-4", selected: data.filters.ageRange == '2-4' },
                            { text: "< 1 week", value: "0-1", selected: data.filters.ageRange == '0-1' }
                        ]
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}

                    {{ govukDetails({
                        summaryText: "Procedure",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseProcedure]",
                            name: "filters[caseProcedure]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more procedures",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'Written reps', text: 'Written representations' },
                                { value: 'Hearing', text: 'Hearing' },
                                { value: 'Inquiry', text: 'Inquiry' }
                            ],
                            values: data.filters.caseProcedure
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}
                    {{ govukDetails({
                        summaryText: "LPA Region",
                        html: govukCheckboxes({
                            idPrefix: "filters[lpaRegion]",
                            name: "filters[lpaRegion]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more LPA regions",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'North', text: 'North' },
                                { value: 'South', text: 'South' },
                                { value: 'East', text: 'East' },
                                { value: 'West', text: 'West' }
                            ],
                            values: data.filters.lpaRegion
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}
                    {{ govukDetails({
                        summaryText: "Case Type",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseType]",
                            name: "filters[caseType]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more case types",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'W', text: 'W' },
                                { value: 'D', text: 'D' }
                            ],
                            values: data.filters.caseType
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}
                    {{ govukDetails({
                        summaryText: "Specialism",
                        html: govukCheckboxes({
                            idPrefix: "filters[caseSpecialisms]",
                            name: "filters[caseSpecialisms]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more specialisms",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'Access', text: 'Access' },
                                { value: 'Listed building and enforcement', text: 'Listed building and enforcement' },
                                { value: 'Roads and traffics', text: 'Roads and traffics' },
                                { value: 'Natural heritage', text: 'Natural heritage' },
                                { value: 'Schedule 1', text: 'Schedule 1' }
                            ],
                            values: data.filters.caseSpecialisms
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}

                    {{ govukDetails({
                        summaryText: "Specialism Code",
                        html: govukCheckboxes({
                            idPrefix: "filters[allocationLevel]",
                            name: "filters[allocationLevel]",
                            classes: "govuk-checkboxes--small",
                            fieldset: {
                                legend: {
                                    text: "Select one or more specialism codes",
                                    classes: "govuk-fieldset__legend--s"
                                }
                            },
                            items: [
                                { value: 'A', text: 'A' },
                                { value: 'B', text: 'B' },
                                { value: 'C', text: 'C' },
                                { value: 'D', text: 'D' },
                                { value: 'E', text: 'E' },
                                { value: 'F', text: 'F' },
                                { value: 'G', text: 'G' },
                                { value: 'H', text: 'H' }
                            ],
                            values: data.filters.allocationLevel
                        }),
                        classes: "custom-filter-dropdown"
                    }) }}
                    <input type="hidden" name="inspector" value="{{ inspectorId }}">
                    <input type="hidden" name="sort" value="{{ sort }}">
                </form>
                <form method="get" novalidate>
                    <input type="hidden" name="inspector" value="{{ inspectorId }}">

                    {% for key, value in data.filters %}
                        {% if value is iterable and not value is string %}
                            {% for item in value %}
                                <input type="hidden" name="filters[{{ key }}][]" value="{{ item }}">
                            {% endfor %}
                        {% else %}
                            <input type="hidden" name="filters[{{ key }}]" value="{{ value }}">
                        {% endif %}
                    {% endfor %}
                    
                    <div class="app-filter__header">
                        <div class="app-filter__header-title">
                            <h2 class="govuk-heading-m bold-title">Sort by</h2>
                        </div>
                    </div>
                    <div class="govuk-form-group" style="display: flex; gap: 5px; margin-bottom 0">
                        {{ govukSelect({
                            id: "sort",
                            name: "sort",
                            items: [
                                { text: "Age", value: "age", selected: sort == "age" },
                                { text: "Distance", value: "distance", selected: sort == "distance" },
                                { text: "Hybrid", value: "hybrid", selected: sort == "hybrid" }
                            ]
                        }) }}
                        {{ govukButton({
                            text: "Sort",
                            type: "submit"
                        }) }}
                    </div>
                </form>
            </div>
        </div>
    </div>
<div class="views-container">
    <div id="table-view" class="view">
        <div class="cases-inspectors-container">
            <div>
                <input type="checkbox" id="select-all" />
                <label for="select-all">Select All</label>
            </div>
            <form method="post" action="/notify" novalidate>
                <input type="hidden" name="inspector" value="{{ inspectorId }}">
                <div class="align-right">
                    <div class="govuk-form-group">
                        <label class="govuk-label" for="assignment-date">Event date: </label>
                    </div>
                    <div class="govuk-form-group">
                        <input type="date" class="govuk-input" id="assignment-date" name="assignmentDate">
                    </div>
                    <div class="govuk-form-group">
                        {{ govukButton({
                            text: "Assign selected cases",
                            type: "submit"
                        }) }}
                    </div>
                </div>
                    {% set caseRows = [] %}
                    {% for c in cases %}
                        {% set caseRows = (caseRows.push([
                            { html: govukCheckboxes({
                                name: "selectedCases",
                                classes: "govuk-checkboxes--small",
                                items: [{ value: c.caseId, text: " ", checked: false }]
                            }) },
                            { html: '<a href="/case/' + c.caseId + '" class="govuk-link">' + c.caseId + '</a>' },
                            { text: c.caseType },
                            { text: c.caseProcedure },
                            { text: c.allocationBand },
                            { text: c.caseLevel },
                            { text: c.siteAddressPostcode },
                            { text: c.lpaName },
                            { text: c.lpaRegion },
                            { text: c.caseStatus },
                            { text: c.caseAge },
                            { html: '<a href="/case/' + c.linkedCases + '" class="govuk-link">' + c.linkedCases + '</a>' },
                            { text: c.finalCommentsDate },
                            { text: c.programmingStatus }
                        ]), caseRows) %}
                    {% endfor %}

                    {% set casesTable %}
                        {{ govukTable({
                            classes: "govuk-!-font-size-14",
                            head: [
                                { text: "" },  
                                { text: "Reference" },
                                { text: "Type" },
                                { text: "Procedure" },
                                { text: "Band" },
                                { text: "Level" },
                                { text: "Location" },
                                { text: "LPA" },
                                { text: "Region" },
                                { text: "Case Status" },
                                { text: "Age" },
                                { text: "Linked cases" },
                                { text: "Final comments date" },
                                { text: "Prog Status" }
                            ],
                            rows: caseRows
                        }) }}
                    {% endset %}

                    {% set mapView %}
                        <div class="home-map">
                            <div class="map-container_test">
                                <div id="map_test" class="map-content_test">
                                    {{ map(apiKey, pins) }}
                                </div>
                            </div>
                        </div>
                    {% endset %}

                    {{ govukTabs({
                        items: [
                            {
                                label: "Cases Table",
                                id: "cases",
                                panel: { html: casesTable }
                            },
                            {
                                label: "Map View",
                                id: "map",
                                panel: { html: mapView }
                            }
                        ]
                    }) }}

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const selectAllCheckbox = document.querySelector('#select-all');
        const checkboxes = document.querySelectorAll('input[type="checkbox"][name="selectedCases"]');
        selectAllCheckbox.addEventListener('change', function () {
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
        });
        const tableTab = document.getElementById('tab-table');
        const mapTab = document.getElementById('tab-map');
        const tableView = document.getElementById('table-view');
        const mapView = document.getElementById('map-view_test');

        mapTab.classList.add('active');
        tableTab.classList.remove('active');
        tableView.style.display = 'block';
        mapView.style.display = 'none';

        tableTab.addEventListener('click', function (e) {
            e.preventDefault();
            tableTab.classList.add('active');
            mapTab.classList.remove('active');
            tableView.style.display = 'block';
            mapView.style.display = 'none';
        });

        mapTab.addEventListener('click', function (e) {
            e.preventDefault();
            mapTab.classList.add('active');
            tableTab.classList.remove('active');
            tableView.style.display = 'none';
            mapView.style.display = 'block';
        });
    });
</script>

{% endblock %}



